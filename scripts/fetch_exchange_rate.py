import os
import requests
import pandas
from dotenv import load_dotenv
from scripts.log_start_log_end import log_start
from scripts.log_start_log_end import log_end

def fetch_usd_to_thb():
    """
        ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Convertion Rate ‡∏à‡∏≤‡∏Å API/
    """
    log_start()

    # ‡πÇ‡∏´‡∏•‡∏î .env ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå config
    dotenv_path = os.path.join(os.path.dirname(__file__), '..', 'config', '.env')
    load_dotenv(dotenv_path)

    # URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    url = os.getenv("EXCHANGE_RATE_API")
    print("‚úÖ DEBUG URL:", url)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
    response = requests.get(url)
    # ‡πÅ‡∏õ‡∏•‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô Python dictionary
    exchange_rate_data = response.json()

    # thb_rate = exchange_rate_data["conversion_rates"]["THB"]
    if "conversion_rates" not in exchange_rate_data:
        raise KeyError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö key 'conversion_rates' ‡πÉ‡∏ô response")
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠ raise ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‚Üí ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚Üí ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞ ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô

    exchange_df = pandas.DataFrame.from_dict(
        exchange_rate_data["conversion_rates"],  # ‡∏î‡∏∂‡∏á dict ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤
        orient="index",  # ‡πÉ‡∏´‡πâ key ‡πÄ‡∏õ‡πá‡∏ô index‡πÅ‡∏ï‡πà‡∏•‡∏∞ key ‡πÉ‡∏ô dictionary ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô index (‡πÅ‡∏ñ‡∏ß) ‡πÅ‡∏ï‡πà‡∏•‡∏∞ value ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß ‡∏ô‡∏±‡πâ‡∏ô
        columns=["rate"]  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ column ‡πÄ‡∏õ‡πá‡∏ô rate
    ).reset_index().rename(columns={"index": "currency"})
    # exchange_df = pandas.DataFrame(
    #     exchange_rate_data["conversion_rates"].items(),  # ‚Üí List of tuples
    #     columns=["currency", "rate"]
    # )

    from datetime import datetime
    time_str = exchange_rate_data["time_last_update_utc"]

    formats = [
        "%a, %d %b %Y %H:%M:%S %z",
        "%d %b %Y %H:%M:%S",
        "%d %m %Y %H:%M:%S",
        "%Y %m %d %H:%M:%S",
        "%Y %m %d",
        "%d %m %Y"
    ]
    for fmt in formats:
        try:
            time_obj = datetime.strptime(time_str, fmt)
            break  # ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        except ValueError:
            continue
    else:
        raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {time_str}")
    # try:
    #     time_obj = datetime.strptime(time_str, "%a, %d %b %Y %H:%M:%S %z")
    # except ValueError:
    #     try:
    #         time_obj = datetime.strptime(time_str, "%d %b %Y %H:%M:%S")
    #     except ValueError:
    #         try:
    #             time_obj = datetime.strptime(time_str, "%d %m %Y %H:%M:%S")
    #         except ValueError:
    #             try:
    #                 time_obj = datetime.strptime(time_str, "%Y %m %d %H:%M:%S")
    #             except ValueError:
    #                 try:
    #                     time_obj = datetime.strptime(time_str, "%Y %m %d")
    #                 except ValueError:
    #                     time_obj = datetime.strptime(time_str, "%d %m %Y")
    # üîç ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ format:
    # %a = ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô (Sat)
    # %d = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (26)
    # %b = ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠ (Jul)
    # %Y = ‡∏õ‡∏µ (2025)
    # %H:%M:%S = ‡πÄ‡∏ß‡∏•‡∏≤
    # %z = timezone offset (+0000)

    # from scripts.parse_datetime import parse_datetime
    # time_obj = parse_datetime(exchange_rate_data["time_last_update_utc"])

    exchange_df["date"] = time_obj.strftime("%Y-%m-%d")

    # from datetime import datetime
    # exchange_df["date"] = datetime.now()
    # exchange_df["date"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # ‡πÅ‡∏õ‡∏•‡∏á index ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô column       # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ column ‡πÉ‡∏´‡∏°‡πà
    print("\n‚úÖ rate:")
    print(exchange_df)

    if "THB" not in exchange_rate_data["conversion_rates"]:
        raise KeyError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ THB ‡πÉ‡∏ô conversion_rates")
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠ raise ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‚Üí ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚Üí ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞ ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô

    # ‚úÖ Filter ‡∏Ñ‡πà‡∏≤ THB ‡∏à‡∏≤‡∏Å DataFrame
    thb_df = exchange_df[exchange_df["currency"] == "THB"].reset_index(drop=True)
    thb_value = thb_df["rate"].values[0]
    print("\n ‡∏≠‡∏±‡∏ï‡∏£‡∏≤ THB ‡∏à‡∏≤‡∏Å DataFrame:")
    print(thb_df)

    try:
        output_path = r'C:/Users/Buath/projects/project_sales_pipeline/output'
        os.makedirs(output_path, exist_ok=True)
        output_file_parquet = os.path.join(output_path, "fetch_exchange_rate.parquet")
        output_file_CSV = os.path.join(output_path, "fetch_exchange_rate.csv")

        exchange_df.to_parquet(output_file_parquet,index=False)
        print(f"\n‚úÖ Saved parquet file to {output_file_parquet}")
        exchange_df.to_csv(output_file_CSV, index=False)
        print(f"‚úÖ Saved csv file to {output_file_CSV}")
    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)

    log_end()
    return thb_value